import se.inera.intyg.IntygPluginKt

import java.nio.file.Files
import java.nio.file.Paths

plugins {
    id "se.inera.intyg.plugin.common" version "3.3.1" apply false
    id "io.spring.dependency-management" version "1.1.3" apply false
    id 'test-report-aggregation'
    id 'idea'
}

ext {
    // Below three schema versions can be removed when old HSA package is retired.
    rivtaDirectoryOrganizationSchemasVersion = "1.1.RC5.6"
    rivtaHsaAuthorizationmanagementSchemasVersion = "1.0.RC4.6"
    rivtaHsaEmployeeSchemasVersion  = "1.0.RC4.6"
    // Above three schema versions can be removed when old HSA package is retired.

    funktionstjansterGrpSchemasVersion = "2.0.0.1"
    intygClinicalprocessSchemasVersion = "1.0.24.1"
    rivtaGetPersonsPersonSchemasVersion = "3.1.1.1"
    rivtaStoreLogSchemasVersion = "2.0.1.1"
    schemasContractVersion = "2.1.8.1"
    schemasSupportVersion = "2.1.5.1"
    srsSchemasVersion = "0.0.16.1"

    commonsIoVersion = "2.14.0"
    commonsCollectionsVersion = "4.4"
    cxfVersion = "3.6.2"
    cxfPluginVersion = "4.0.0"
    embeddedRedisVersion = "0.7.2"
    guavaVersion = "32.1.3-jre"
    jakartaJwsApiVersion = "2.1.0" // version 3.0.0 -> warning: "class file for javax.jws.soap.SOAPBinding$ParameterStyle not found"
    jaxb2Version = "0.13.1"
    jaxb2NamespacePrefixVersion = "2.0"
    jaxbImplVersion = "2.3.8"
    saxonVersion = "12.3"
    shedlockSpringVersion = "4.46.0"
    springSecuritySaml2CoreVersion = "1.0.3.RELEASE" //Higher versions require opensaml 2.6.6 (not available 2020-03-23)
    uapVersion = "1.5.3"
    xmlSecVersion = "4.0.0"

    springbootMavenBomVersion = "2.7.17"
}

allprojects {
    apply plugin: 'se.inera.intyg.plugin.common'
    apply plugin: "io.spring.dependency-management"
    apply plugin: 'maven-publish'
    apply plugin: 'java'

    group = 'se.inera.intyg.infra'
    version = System.properties['buildVersion'] ?: '3.21.0-SNAPSHOT'
    sourceCompatibility = 11
    targetCompatibility = 11

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springbootMavenBomVersion}"
        }
    }

    dependencies {
        implementation "ch.qos.logback:logback-classic"
        implementation "jakarta.annotation:jakarta.annotation-api"
        implementation "jakarta.jws:jakarta.jws-api:${jakartaJwsApiVersion}"
        implementation "jakarta.xml.ws:jakarta.xml.ws-api"

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        testImplementation "junit:junit"
        testImplementation "org.glassfish.jaxb:jaxb-runtime"
        testImplementation "org.junit.jupiter:junit-jupiter-api"
        testImplementation "org.junit.jupiter:junit-jupiter-params"
        testImplementation "org.mockito:mockito-core"
        testImplementation "org.mockito:mockito-junit-jupiter"
        testImplementation "org.springframework:spring-test"

        testCompileOnly "org.projectlombok:lombok"
        testAnnotationProcessor "org.projectlombok:lombok"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
        testRuntimeOnly "org.junit.vintage:junit-vintage-engine"
    }

    tasks.register("install") {
        description("Publishes artifact to local maven repository.")
        dependsOn(publishToMavenLocal)
    }

    tasks.register("createVersionPropertyFile", VersionPropertyFileTask)

    if (project.hasProperty('codeQuality')) {
        tasks.register('spotbugsIncludesAndExcludes') {
            dependsOn ":unzipBuildTools"
            def spotbugsToolDir = "${rootProject.layout.buildDirectory.get().asFile}/build-tools/spotbugs"
            spotbugsMain {
                includeFilter.set(file("${spotbugsToolDir}/spotbugsIncludeFilter.xml"))
                excludeFilter.set(file("${spotbugsToolDir}/spotbugsExcludeFilter.xml"))
            }
        }

        checkstyleMain.dependsOn createVersionPropertyFile
        jacocoTestReport.mustRunAfter createVersionPropertyFile
        spotbugsMain.dependsOn('spotbugsIncludesAndExcludes')
        spotbugsTest.enabled(false)
        dependencies { spotbugsSlf4j "org.slf4j:slf4j-simple" }

        afterEvaluate {
            if (project.name == "hsatk-integration") {
                licenseMain.dependsOn(wsdl2javaTask)
            }
        }
    }

    compileJava.options.encoding = 'UTF-8'
    compileTestJava.dependsOn createVersionPropertyFile
    test { useJUnitPlatform() }

    repositories {
        mavenLocal()
        maven { url "https://nexus.drift.inera.se/repository/it-public/" }
        mavenCentral {
            content {
                excludeGroupByRegex "se\\.inera.*"
            }
        }
    }

    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
            }
        }
        repositories.maven {
            url = uri("https://nexus.drift.inera.se/repository/maven-releases/")
            credentials {
                username = System.properties['ineraNexusUsername']
                password = System.properties['ineraNexusPassword']
            }
        }
    }
}

subprojects.collect {subproject -> subproject.name }.each { subprojectName ->
    dependencies { testReportAggregation project(":${subprojectName}") }
}

tasks.register('tagRelease', TagReleaseTask)

tasks.register('unzipBuildTools', Copy) {
    into "${rootProject.layout.buildDirectory.get().asFile}/build-tools/"
    from { zipTree(rootProject.buildscript.configurations.classpath.find { it.name.contains("se.inera.intyg.plugin.common") })
            .matching { include "/spotbugs/**", "/git_hooks/**" }
    }
}

tasks.register('applyGitHooks') {
    dependsOn unzipBuildTools
    doLast {
        def repository = IntygPluginKt.findGitRepository(project.rootProject.projectDir)
        def gitHooksDir = "${rootProject.layout.buildDirectory.get().asFile}/build-tools/git_hooks"
        def commitMsg = file("${gitHooksDir}/commit-msg")
        def preCommit = file("${gitHooksDir}/pre-commit")
        def toDir = Paths.get(repository.directory.path, "hooks")

        if (!Files.exists(toDir)) { Files.createDirectory(toDir) }
        IntygPluginKt.copyFile(commitMsg, toDir)
        IntygPluginKt.copyFile(preCommit, toDir)
    }
}

createVersionPropertyFile.dependsOn(applyGitHooks)
